package com.miyag.howardchat;

/**
 * Created by miyag on 8/7/17.
 */

import android.content.Context;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.Query;
import com.google.firebase.database.ServerValue;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageSource {

    DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference();
    public interface PingListener {
        void onmessagesReceived(List<Message> pingList);
    }

    private static MessageSource sNewsSource;

    private Context mContext;

    public static MessageSource get(Context context) {
        if (sNewsSource == null) {
            sNewsSource = new MessageSource(context);
        }
        return sNewsSource;
    }

    private MessageSource(Context context) {
        mContext = context;
    }

    // Firebase methods for you to implement.

    public void getmessages(final PingListener pingListener) {
        DatabaseReference messagesRef = databaseReference.child("messages");
        Query last50messagesQuery = messagesRef.limitToLast(50);
        last50messagesQuery.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                Iterable<DataSnapshot> messagesSnapshots = dataSnapshot.getChildren();
                ArrayList<Message> pingList = new ArrayList<>();
                for (DataSnapshot messagesnap : messagesSnapshots) {
                    Message newPing = new Message(messagesnap);
                    pingList.add(newPing);
                }
                pingListener.onmessagesReceived(pingList);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    public void getmessagesForUserId(String userId, final PingListener pingListener) {

        DatabaseReference messagesRef = databaseReference.child("messages");
        Query userQuery = messagesRef.orderByChild("userId").equalTo(userId).limitToLast(50);
        userQuery.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                Iterable<DataSnapshot> messagesSnapshots = dataSnapshot.getChildren();
                List<Message> pingList = new ArrayList<Message>();
                for (DataSnapshot messagessnap : messagesSnapshots) {
                    Message newPing = new Message(messagessnap);
                    pingList.add(newPing);
                }
                pingListener.onmessagesReceived(pingList);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });

    }

    public void sendPing(Message ping) {
        DatabaseReference messagesRef = databaseReference.child("messages");
        DatabaseReference newPingRef = messagesRef.push();//autogenerated unique key
        Map<String, Object> pingValMap = new HashMap<String, Object>();
        pingValMap.put("fromUserName", ping.getUserName());
        pingValMap.put("fromUserId", ping.getUserId());
        pingValMap.put("content", ping.getContent());
        newPingRef.setValue(pingValMap);//sets its as value of generated key

    }
}

